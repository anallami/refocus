# =============================================================================
# Copyright (c) 2018, salesforce.com, inc.
# All rights reserved.
# Licensed under the BSD 3-Clause license.
# For full license text, see LICENSE.txt file in the repo root or
# https://opensource.org/licenses/BSD-3-Clause
# =============================================================================

# =============================================================================
# api/v1/swagger/paths/botActions.yaml
# =============================================================================
BotActions:
  x-swagger-router-controller: botActions
  get:
    security:
      - jwt: []
    summary: Find botActions
    tags: [ botActions ]
    operationId: findBotActions
    parameters:
      -
        name: roomId
        description: Get actions from specific room
        in: query
        required: false
        type: integer
      -
        name: botId
        description: Get actions from specific bot
        in: query
        required: true
        type: string
      -
        name: name
        description: Get botActions by name
        in: query
        required: false
        type: string
      -
        name: isPending
        description: Get pending botActions
        in: query
        required: false
        type: boolean
      -
        $ref: "#/parameters/limitParam"
      -
        $ref: "#/parameters/offsetParam"
    responses:
      200:
        description: >-
          Success, returns all BotActions
        schema:
          type: array
          items:
            $ref: "#/definitions/BotActionResponse"
      400:
        $ref: "#/responses/400"
      401:
        $ref: "#/responses/401"
      404:
        $ref: "#/responses/404"
      default:
        $ref: "#/responses/genericError"

  post:
    security:
      - jwt: []
    summary: Create botAction
    tags: [ botActions ]
    description: Create a new botAction with a name, room id and bot id
    operationId: postBotActions
    parameters:
      -
        name: queryBody
        in: body
        required: true
        schema:
          type: object
          description: Create botAction properties
          properties:
            name:
              type: string
              maxLength: 254
              description: Name of the botAction
              pattern: ^[0-9A-Za-z_\\-]{0,60}$
            isPending:
              type: boolean
              description: If the botAction is active
            parameters:
              type: array
              description: Array of objects that contain the name of actions a botAction can take and an array of parameters needed for that action
              items:
                type: object
            response:
              type: object
              description: A JSON field that contains the output of an action
            roomId:
              type: integer
              description: The room in which this action is in reference with
            botId:
              type: string
              description: The bot of which this action is in reference with
            userId:
              type: string
              description: The user of which this action is in reference with
          required:
            - name
            - roomId
            - botId
    responses:
      201:
        description: >-
          Created botAction
        schema:
          $ref: "#/definitions/BotActionResponse"
      400:
        $ref: "#/responses/400"
      401:
        $ref: "#/responses/401"
      403:
        $ref: "#/responses/403"
      default:
        $ref: "#/responses/genericError"

# ---------------------------------------------------------------------------
BotActionsByID:
  x-swagger-router-controller: botActions
  delete:
    security:
      - jwt: []
    summary: Delete botAction
    tags: [ botActions ]
    description: >-
      Delete a specific botAction
    operationId: deleteBotActions
    parameters:
      -
        name: key
        in: path
        description: >-
          The id or name of the botAction to delete.
        required: true
        type: string
    responses:
      200:
        description: >-
          Success, Deleted BotAction
        schema:
          $ref: "#/definitions/BotActionResponse"
      400:
        $ref: "#/responses/400"
      401:
        $ref: "#/responses/401"
      404:
        $ref: "#/responses/404"
      default:
        $ref: "#/responses/genericError"

  get:
    security:
      - jwt: []
    summary: Get botAction
    tags: [ botActions ]
    operationId: getBotAction
    parameters:
      -
        name: key
        in: path
        description: >-
          The id or name of the botAction to retrieve
        required: true
        type: string
      -
        name: isPending
        description: Get botActions depending on its pending tag
        in: query
        required: false
        type: boolean
      -
        $ref: "#/parameters/limitParam"
      -
        $ref: "#/parameters/offsetParam"
    responses:
      200:
        description: >-
          Success, returns specified botAction
        schema:
          $ref: "#/definitions/BotActionResponse"
      400:
        $ref: "#/responses/400"
      401:
        $ref: "#/responses/401"
      404:
        $ref: "#/responses/404"
      default:
        $ref: "#/responses/genericError"

  patch:
    security:
      - jwt: []
    summary: Update botAction (partial)
    tags: [ botActions ]
    description: Update botAction fields
    operationId: patchBotAction
    parameters:
      -
        name: key
        in: path
        description: >-
          The id or name of the botAction to retrieve
        required: true
        type: string
      -
        name: queryBody
        in: body
        required: true
        schema:
          type: object
          description: Update specified botAction fields
          properties:
            name:
              type: string
              maxLength: 254
              description: Name of the botAction
              pattern: ^[0-9A-Za-z_\\-]{0,60}$
            isPending:
              type: boolean
              description: If the botAction is active
            parameters:
              type: array
              description: Array of objects that contain the name of actions a botAction can take and an array of parameters needed for that action
              items:
                type: object
            response:
              type: object
              description: A JSON field that contains the output of an action
            roomId:
              type: integer
              description: The room in which this action is in reference with
            botId:
              type: string
              description: The bot of which this action is in reference with
            userId:
              type: string
              description: The user of which this action is in reference with
    responses:
      200:
        description: >-
          Updated field
        schema:
          $ref: "#/definitions/BotActionResponse"
      400:
        $ref: "#/responses/400"
      401:
        $ref: "#/responses/401"
      403:
        $ref: "#/responses/403"
      default:
        $ref: "#/responses/genericError"

# ---------------------------------------------------------------------------
BotActionWriters:
  x-swagger-router-controller: botActions
  delete:
    security:
      - jwt: []
    summary: Delete bot writers
    tags: [ botActions ]
    description: >-
      Remove all users from a botAction's list of authorized writers.
    operationId: deleteBotActionsWriters
    parameters:
      -
        name: key
        in: path
        description: >-
           The id or name of the bot.
        required: true
        type: string
    responses:
      204:
        description: >-
          The bot is no longer write-protected.
      400:
        $ref: "#/responses/400"
      401:
        $ref: "#/responses/401"
      403:
        $ref: "#/responses/403"
      404:
        $ref: "#/responses/404"
      default:
        $ref: "#/responses/genericError"
  get:
    security:
      - jwt: []
    summary: Get botAction writers
    tags: [ botActions ]
    description: >-
      Get the list of all authorized writers for a botAction.
    operationId: getBotActionWriters
    parameters:
      -
        name: key
        in: path
        description: >-
          The id or name of the botAction for which the authorized list of users
          are to be obtained.
        required: true
        type: string
    responses:
      200:
        description: >-
          Success, returns the users having write permission to the botAction.
        schema:
          type: array
          items:
            $ref: "#/definitions/UsersResponse"
            description: >-
              The users having write permission to the botAction
      400:
        $ref: "#/responses/400"
      401:
        $ref: "#/responses/401"
      404:
        $ref: "#/responses/404"
      default:
        $ref: "#/responses/genericError"
  post:
    security:
      - jwt: []
    summary: Add botAction writer
    tags: [ botActions ]
    description: >-
      Add one or more users to a botActions list of authorized writers.
    operationId: postBotActionWriters
    parameters:
      -
        name: key
        in: path
        description: >-
          The id or name of the botAction for which the authorized list of users
          are to be obtained.
        required: true
        type: string
      -
        name: queryBody
        description: Request body.
        in: body
        required: true
        schema:
          type: array
          items:
            type: string
          description: >
            User name
    responses:
      201:
        description: >-
          One or more of the valid users were added to the list of authorized writers.
        schema:
          type: array
          items:
            $ref: "#/definitions/BotActionWriterResponse"
            description: >-
              The users having write permission to the botAction
      400:
        $ref: "#/responses/400"
      401:
        $ref: "#/responses/401"
      403:
        $ref: "#/responses/403"
      404:
        $ref: "#/responses/403"
      default:
        $ref: "#/responses/genericError"

# ---------------------------------------------------------------------------
BotActionWritersByID:
  x-swagger-router-controller: botActions
  delete:
    security:
      - jwt: []
    summary: Delete botActions writer
    tags: [ botActions ]
    description: >-
      Remove a user from a botAction's list of authorized writers.
    operationId: deleteBotWriter
    parameters:
      -
        name: key
        in: path
        description: >-
          The id or name of the botAction
        required: true
        type: string
      -
        name: userNameOrId
        in: path
        description: >-
          The username or the Id of the user
        required: true
        type: string
    responses:
      204:
        description: >-
          The user’s write permission has been revoked for the botAction.
      400:
        $ref: "#/responses/400"
      401:
        $ref: "#/responses/401"
      403:
        $ref: "#/responses/403"
      404:
        $ref: "#/responses/404"
      default:
        $ref: "#/responses/genericError"
  get:
    security:
      - jwt: []
    summary: Get bot writer
    tags: [ botActions ]
    description: >-
      Determine whether a user is an authorized writer for botAction.
    operationId: getBotActionWriter
    parameters:
      -
        name: key
        in: path
        description: >-
          The id or name of the botAction for which the authorized list of users
          are to be obtained.
        required: true
        type: string
      -
        name: userNameOrId
        in: path
        description: >-
          The username or the Id of the user
        required: true
        type: string
    responses:
      200:
        description: >-
          Success, return authorized user
        schema:
          $ref: "#/definitions/UsersResponse"
      400:
        $ref: "#/responses/400"
      401:
        $ref: "#/responses/401"
      404:
        $ref: "#/responses/404"
      default:
        $ref: "#/responses/genericError"
