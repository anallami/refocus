# =============================================================================
# Copyright (c) 2018, salesforce.com, inc.
# All rights reserved.
# Licensed under the BSD 3-Clause license.
# For full license text, see LICENSE.txt file in the repo root or
# https://opensource.org/licenses/BSD-3-Clause
# =============================================================================

# =============================================================================
# api/v1/swagger/paths/botData.yaml
# =============================================================================
BotData:
  x-swagger-router-controller: botData
  get:
    security:
      - jwt: []
    tags: [ botData ]
    operationId: findBotData
    parameters:
      -
        name: roomId
        description: Get data from specific room
        in: query
        required: false
        type: integer
      -
        name: botId
        description: Get data from specific bot
        in: query
        required: true
        type: string
      -
        name: name
        description: Filter botData by name
        in: query
        required: false
        type: string
      -
        $ref: "#/parameters/limitParam"
      -
        $ref: "#/parameters/offsetParam"
    responses:
      200:
        description: >-
          Success, returns all botData
        schema:
          type: array
          items:
            $ref: "#/definitions/BotDataResponse"
      400:
        $ref: "#/responses/400"
      401:
        $ref: "#/responses/401"
      403:
        $ref: "#/responses/403"
      404:
        $ref: "#/responses/404"
      default:
        $ref: "#/responses/genericError"

  post:
    security:
      - jwt: []
    summary: Create botData
    tags: [ botData ]
    description: Create new bot data for a rooms specific bots
    operationId: postBotData
    parameters:
      -
        name: queryBody
        in: body
        required: true
        schema:
          type: object
          description: Create botData properties
          properties:
            name:
              type: string
              maxLength: 254
              description: Name of the bot data
              pattern: ^[0-9A-Za-z_\\-]{0,60}$
            value:
              type: string
              description: Value of the bot data
            botId:
              type: string
              maxLength: 254
              description: UUID for the corresponding bot
            roomId:
              type: integer
              maxLength: 254
              description: Number for the corresponding room
          required:
            - name
            - value
            - roomId
            - botId
    responses:
      201:
        description: >-
          Created botData
        schema:
          $ref: "#/definitions/BotDataResponse"
      400:
        $ref: "#/responses/400"
      401:
        $ref: "#/responses/401"
      403:
        $ref: "#/responses/403"
      404:
        $ref: "#/responses/404"
      default:
        $ref: "#/responses/genericError"

# ---------------------------------------------------------------------------
BotDataWriters:
  x-swagger-router-controller: botData
  delete:
    security:
      - jwt: []
    summary: Delete bot writers
    tags: [ botData ]
    description: >-
      Remove all users from a botData's list of authorized writers.
    operationId: deleteBotDataWriters
    parameters:
      -
        name: key
        in: path
        description: >-
           The id or name of the botData.
        required: true
        type: string
    responses:
      204:
        description: >-
          The botData is no longer write-protected.
      400:
        $ref: "#/responses/400"
      401:
        $ref: "#/responses/401"
      403:
        $ref: "#/responses/403"
      404:
        $ref: "#/responses/404"
      default:
        $ref: "#/responses/genericError"
  get:
    security:
      - jwt: []
    summary: Get botData writers
    tags: [ botData ]
    description: >-
      Get the list of all authorized writers for a botData.
    operationId: getBotDataWriters
    parameters:
      -
        name: key
        in: path
        description: >-
          The id or name of the botData for which the authorized list of users
          are to be obtained.
        required: true
        type: string
    responses:
      200:
        description: >-
          Success, returns the users having write permission to the botData.
        schema:
          type: array
          items:
            $ref: "#/definitions/UsersResponse"
            description: >-
              The users having write permission to the botData
      400:
        $ref: "#/responses/400"
      401:
        $ref: "#/responses/401"
      404:
        $ref: "#/responses/404"
      default:
        $ref: "#/responses/genericError"
  post:
    security:
      - jwt: []
    summary: Add botData writer
    tags: [ botData ]
    description: >-
      Add one or more users to a botDatas list of authorized writers.
    operationId: postBotDataWriters
    parameters:
      -
        name: key
        in: path
        description: >-
          The id or name of the botData for which the authorized list of users
          are to be obtained.
        required: true
        type: string
      -
        name: queryBody
        description: Request body.
        in: body
        required: true
        schema:
          type: array
          items:
            type: string
          description: >
            User name
    responses:
      201:
        description: >-
          One or more of the valid users were added to the list of authorized writers.
        schema:
          type: array
          items:
            $ref: "#/definitions/BotDataWriterResponse"
            description: >-
              The users having write permission to the botData
      400:
        $ref: "#/responses/400"
      401:
        $ref: "#/responses/401"
      403:
        $ref: "#/responses/403"
      404:
        $ref: "#/responses/403"
      default:
        $ref: "#/responses/genericError"

# ---------------------------------------------------------------------------
BotDataWritersByID:
  x-swagger-router-controller: botData
  delete:
    security:
      - jwt: []
    summary: Delete botActions writer
    tags: [ botActions ]
    description: >-
      Remove a user from a botData's list of authorized writers.
    operationId: deleteBotDataWriter
    parameters:
      -
        name: key
        in: path
        description: >-
          The id or name of the botData
        required: true
        type: string
      -
        name: userNameOrId
        in: path
        description: >-
          The username or the Id of the user
        required: true
        type: string
    responses:
      204:
        description: >-
          The userâ€™s write permission has been revoked for the botAction.
      400:
        $ref: "#/responses/400"
      401:
        $ref: "#/responses/401"
      403:
        $ref: "#/responses/403"
      404:
        $ref: "#/responses/404"
      default:
        $ref: "#/responses/genericError"
  get:
    security:
      - jwt: []
    summary: Get botData writer
    tags: [ botData ]
    description: >-
      Determine whether a user is an authorized writer for botData.
    operationId: getBotDataWriter
    parameters:
      -
        name: key
        in: path
        description: >-
          The id or name of the botData for which the authorized list of users
          are to be obtained.
        required: true
        type: string
      -
        name: userNameOrId
        in: path
        description: >-
          The username or the Id of the user
        required: true
        type: string
    responses:
      200:
        description: >-
          Success, return authorized user
        schema:
          $ref: "#/definitions/UsersResponse"
      400:
        $ref: "#/responses/400"
      401:
        $ref: "#/responses/401"
      404:
        $ref: "#/responses/404"
      default:
        $ref: "#/responses/genericError"

# ---------------------------------------------------------------------------
UpsertBotData:
  x-swagger-router-controller: botData
  post:
    security:
      - jwt: []
    summary: Upsert botData
    tags: [ botData ]
    description: Creates or updates bot data for a room's specific bots
    operationId: upsertBotData
    parameters:
      -
        name: queryBody
        in: body
        required: true
        schema:
          type: object
          description: Create botData properties
          properties:
            name:
              type: string
              maxLength: 254
              description: Name of the bot data
              pattern: ^[0-9A-Za-z_\\-]{0,60}$
            value:
              type: string
              description: Value of the bot data
            botId:
              type: string
              maxLength: 254
              description: UUID for the corresponding bot
            roomId:
              type: integer
              maxLength: 254
              description: Number for the corresponding room
          required:
            - name
            - value
            - roomId
            - botId
    responses:
      201:
        description: >-
          Bot Data Created
        schema:
          $ref: "#/definitions/BotDataResponse"
      200:
        description: >-
          Bot Data Updated
        schema:
          $ref: "#/definitions/BotDataResponse"
      400:
        $ref: "#/responses/400"
      401:
        $ref: "#/responses/401"
      403:
        $ref: "#/responses/403"
      404:
        $ref: "#/responses/404"
      default:
        $ref: "#/responses/genericError"

# ---------------------------------------------------------------------------
BotDataByID:
  x-swagger-router-controller: botData
  get:
    security:
      - jwt: []
    summary: Get botData
    tags: [ botData ]
    operationId: getBotData
    parameters:
      -
        name: key
        in: path
        description: >-
          The id or name of the botData to retrieve
        required: true
        type: string
      -
        $ref: "#/parameters/limitParam"
      -
        $ref: "#/parameters/offsetParam"
    responses:
      200:
        description: >-
          Success, returns specified botData
        schema:
          $ref: "#/definitions/BotDataResponse"
      400:
        $ref: "#/responses/400"
      401:
        $ref: "#/responses/401"
      404:
        $ref: "#/responses/404"
      default:
        $ref: "#/responses/genericError"

  patch:
    security:
      - jwt: []
    summary: Update botData (partial)
    tags: [ botData ]
    description: Update botData fields
    operationId: patchBotData
    parameters:
      -
        name: key
        in: path
        description: >-
          The id or name of the botData to retrieve
        required: true
        type: string
      -
        name: queryBody
        in: body
        required: true
        schema:
          type: object
          description: Create botData properties
          properties:
            name:
              type: string
              maxLength: 254
              description: Name of the bot data
              pattern: ^[0-9A-Za-z_\\-]{0,60}$
            value:
              type: string
              description: Value of the bot data
            botId:
              type: string
              maxLength: 254
              description: UUID for the coresponding bot
            roomId:
              type: integer
              maxLength: 254
              description: Number for the coresponding room
    responses:
      200:
        description: >-
          Updated field
        schema:
          $ref: "#/definitions/BotDataResponse"
      400:
        $ref: "#/responses/400"
      401:
        $ref: "#/responses/401"
      403:
        $ref: "#/responses/403"
      default:
        $ref: "#/responses/genericError"

  delete:
    security:
      - jwt: []
    summary: Delete botData
    tags: [ botData ]
    description: >-
      Delete a specific botData
    operationId: deleteBotData
    parameters:
      -
        name: key
        in: path
        description: >-
          The id or name of the botData to delete.
        required: true
        type: string
    responses:
      200:
        description: >-
          Success, Deleted BotData
        schema:
          $ref: "#/definitions/BotDataResponse"
      400:
        $ref: "#/responses/400"
      401:
        $ref: "#/responses/401"
      403:
        $ref: "#/responses/403"
      404:
        $ref: "#/responses/404"
      default:
        $ref: "#/responses/genericError"
